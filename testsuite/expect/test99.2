#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test of job workflows (--workflow-start --workflow-prior-dependency --workflow-end options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2004-2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "99.2"
set file_in1    "test$test_id.input1"
set exit_code   0
set job_id1     0
set job_id2     0

print_header $test_id

# if scontrol could be ran from the compute nodes this would work as well
if {[test_alps]} {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
}

#
# Build input script files
#
exec $bin_rm -f $file_in1
make_bash_script $file_in1 "$bin_sleep 60"

#
# Spawn a batch job that just sleeps for a while
#
set timeout $max_job_delay
set sbatch_pid [spawn $sbatch --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
	-re "Submitted batch job ($number)" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		slow_kill $sbatch_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

#
# A. Submit a workflow job without a workflow START (sbatch)
#
set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --workflow-prior-dependency=$job_id1 --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Batch job submission failed: Invalid Prior dependency workflow job id" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: invalid workflow; (A) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
        cancel_job $job_id1
}

set matches 0
set match_job_state 0
set srun_pid1 [spawn $srun --workflow-prior-dependency=$job_id1 --output=/dev/null --error=/dev/null -t1 sleep 10]
expect {
        "srun: error: Unable to allocate resources: Invalid Prior dependency workflow job id" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $srun_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: invalid workflow; (A) srun didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
        cancel_job $job_id1
}



#
# B. Submit a workflow with START and END (sbatch)
#
set matches 0
set match_job_state 0
set job_id1 0
set job_id2 0
set timeout $max_job_delay
set sbatch_pid [spawn $sbatch --workflow-start --workflow-end --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Incompatible workflow options (START and Prior Job ID or END)" {
                incr matches
        }
        timeout {
                send_user "\nFAILURE: sbatch not responding\n"
                slow_kill $sbatch_pid
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "\nFAILURE: invalid workflow; (B) START and END sbatch submit failure\n"
        exit 1
}
if {$matches == 1} {
        send_user "\nNo worries. This error is expected\n"
        send_user "\nSUCCESS\n"
}

set matches 0
set srun_pid [spawn $srun --workflow-start --workflow-end --output=/dev/null --error=/dev/null -t1 sleep 10]
expect {
        "srun: error: Incompatible workflow options (START and Prior Job ID or END)" {
                incr matches
        }
        timeout {
                send_user "\nFAILURE: srun not responding\n"
                slow_kill $srun_pid
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "\nFAILURE: invalid workflow; (B) START and END srun submit failure\n"
        exit 1
}
if {$matches == 1} {
        send_user "\nNo worries. This error is expected\n"
        send_user "\nSUCCESS\n"
}



#
# C. Submit a workflow with START and PRIOR (sbatch)
#
set matches 0
set match_job_state 0
set job_id1 0
set job_id2 0
set timeout $max_job_delay
set sbatch_pid [spawn $sbatch --workflow-start --workflow-prior-dependency=$sbatch_pid --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Incompatible workflow options (START and Prior Job ID or END)" {
                incr matches
        }
        timeout {
                send_user "\nFAILURE: sbatch not responding\n"
                slow_kill $sbatch_pid
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "\nFAILURE: invalid workflow; (C) START and PRIOR sbatch submit failure\n"
        exit 1
}
if {$matches == 1} {
        send_user "\nNo worries. This error is expected\n"
        send_user "\nSUCCESS\n"
}

set matches 0
set srun_pid [spawn $srun --workflow-start --workflow-prior-dependency=$sbatch_pid --output=/dev/null --error=/dev/null -t1 sleep 10]
expect {
        "srun: error: Incompatible workflow options (START and Prior Job ID or END)" {
                incr matches
        }
        timeout {
                send_user "\nFAILURE: sbatch not responding\n"
                slow_kill $srun_pid
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "\nFAILURE: invalid workflow; (C) START and PRIOR srun submit failure\n"
        exit 1
}
if {$matches == 1} {
        send_user "\nNo worries. This error is expected\n"
        send_user "\nSUCCESS\n"
}


#
# D. Submit a workflow with START and invalid PRIOR (sbatch)
#
set matches 0
set match_job_state 0
set job_id1 0
set job_id2 0
set timeout $max_job_delay
set sbatch_pid [spawn $sbatch --workflow-start --workflow-prior-dependency=-1 --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Incompatible workflow options (START and Prior Job ID or END)" {
                incr matches
        }
        timeout {
                send_user "\nFAILURE: sbatch not responding\n"
                slow_kill $sbatch_pid
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "\nFAILURE: invalid workflow; (D) START and invalid PRIOR sbatch submit failure\n"
        exit 1
}
if {$matches == 1} {
        send_user "\nNo worries. This error is expected\n"
        send_user "\nSUCCESS\n"
}

set matches 0
set srun_pid [spawn $srun --workflow-start --workflow-prior-dependency=-1 --output=/dev/null --error=/dev/null -t1 sleep 5]
expect {
        "srun: error: Incompatible workflow options (START and Prior Job ID or END)" {
                incr matches
        }
        timeout {
                send_user "\nFAILURE: srun not responding\n"
                slow_kill $srun_pid
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "\nFAILURE: invalid workflow; (D) START and invalid PRIOR srun submit failure\n"
        exit 1
}
if {$matches == 1} {
        send_user "\nNo worries. This error is expected\n"
        send_user "\nSUCCESS\n"
}



#
# E. Submit a workflow with END and NO PRIOR (sbatch)
#
set matches 0
set match_job_state 0
set job_id1 0
set job_id2 0
set timeout $max_job_delay
set sbatch_pid [spawn $sbatch --workflow-end --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Incompatible workflow options (END and START or no Prior Job ID)" {
                incr matches
        }
        timeout {
                send_user "\nFAILURE: sbatch not responding\n"
                slow_kill $sbatch_pid
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "\nFAILURE: invalid workflow; (E) END and NO PRIOR sbatch submit failure\n"
        exit 1
}
if {$matches == 1} {
        send_user "\nNo worries. This error is expected\n"
        send_user "\nSUCCESS\n"
}

set matches 0
set srun_pid [spawn $srun --workflow-end --output=/dev/null --error=/dev/null -t1 sleep 5]
expect {
        "srun: error: Incompatible workflow options (END and START or no Prior Job ID)" {
                incr matches
        }
        timeout {
                send_user "\nFAILURE: srun not responding\n"
                slow_kill $srun_pid
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "\nFAILURE: invalid workflow; (E) END and NO PRIOR srun submit failure\n"
        exit 1
}
if {$matches == 1} {
        send_user "\nNo worries. This error is expected\n"
        send_user "\nSUCCESS\n"
}


#
# F. Submit a workflow with END and invalid PRIOR (sbatch)
#
set matches 0
set match_job_state 0
set job_id1 0
set job_id2 0
set timeout $max_job_delay
set sbatch_pid [spawn $sbatch --workflow-end --workflow-prior-dependency=$sbatch_pid --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Batch job submission failed: Invalid Prior dependency workflow job id" {
                incr matches
        }
        timeout {
                send_user "\nFAILURE: sbatch not responding\n"
                slow_kill $sbatch_pid
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "\nFAILURE: invalid workflow; (E) END and NO PRIOR sbatch submit failure\n"
        exit 1
}
if {$matches == 1} {
        send_user "\nNo worries. This error is expected\n"
        send_user "\nSUCCESS\n"
}

set matches 0
set srun_pid [spawn $srun --workflow-end --workflow-prior-dependency=$sbatch_pid --output=/dev/null --error=/dev/null -t1 sleep 5]
expect {
        "srun: error: Unable to allocate resources: Invalid Prior dependency workflow job id" {
                incr matches
        }
        timeout {
                send_user "\nFAILURE: srun not responding\n"
                slow_kill $srun_pid
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "\nFAILURE: invalid workflow; (E) END and NO PRIOR srun submit failure\n"
        exit 1
}
if {$matches == 1} {
        send_user "\nNo worries. This error is expected\n"
        send_user "\nSUCCESS\n"
}



if {$exit_code == 0} {
        exec $bin_rm -f $file_in1
        print_success $test_id
}
exit $exit_code


