#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test of FileSystems on demand. (sbatch)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2004-2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "99.6"
set file_in1    "test$test_id.input1"
set exit_code   0
set job_id1     0
set job_id2     0

print_header $test_id

# if scontrol could be ran from the compute nodes this would work as well
if {[test_alps]} {
	send_user "\nWARNING: This test is incompatible with Cray systems\n"
	exit $exit_code
}

#
# Build input script files
#
exec $bin_rm -f $file_in1
make_bash_script $file_in1 "$bin_sleep 6"

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-device=test --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: unrecognized filesystem device \"test\"" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: invalid filesystem device; (A1) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-device=pmem --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Filesystem device requires type, mountpoint and size" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem device; (A2) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-device=pmem --filesystem-type=ext3 --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Filesystem device requires type, mountpoint and size" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait 
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem device; (A3) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-device=pmem --filesystem-type=ext3 --filesystem-mountpoint=/mnt/test --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Filesystem device requires type, mountpoint and size" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem device; (A4) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-device=pmem --filesystem-type=ext3 --filesystem-size=100 --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Filesystem device requires type, mountpoint and size" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem device; (A5) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-device=pmem --filesystem-size=100 --filesystem-mountpoint=/mnt/test --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Filesystem device requires type, mountpoint and size" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem device; (A6) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}



















set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-type=test --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: unrecognized filesystem type \"test\"" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: invalid filesystem type; (B1) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-type=ext3 --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Filesystem type requires device, mountpoint and size" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem type; (B2) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-type=ext3 --filesystem-device=pmem --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Filesystem device requires type, mountpoint and size" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait 
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem type; (B3) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-type=ext3 --filesystem-device=pmem --filesystem-mountpoint=/mnt/test --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Filesystem device requires type, mountpoint and size" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem type; (B4) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-type=ext3 --filesystem-device=pmem --filesystem-size=100 --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Filesystem device requires type, mountpoint and size" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem type; (B5) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-type=ext3 --filesystem-size=100 --filesystem-mountpoint=/mnt/test --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: Filesystem type requires device, mountpoint and size" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem type; (B6) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-type=ext33 --filesystem-size=100 --filesystem-mountpoint=/mnt/test --filesystem-device=pmem --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: unrecognized filesystem type \"ext33\"" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem type; (B7) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-type=ext3 --filesystem-size=10 --filesystem-mountpoint=/mnt/test --filesystem-device=pmem --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: unrecognized filesystem size \"10\"" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem size; (B8) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-type=ext3 --filesystem-size=100 --filesystem-mountpoint=/mnt/ --filesystem-device=pmem --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: unrecognized filesystem mountpoint \"/mnt/\"" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem mountpoint; (B9) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}

set matches 0
set match_job_state 0
set sbatch_pid1 [spawn $sbatch --filesystem-type=ext3 --filesystem-size=100 --filesystem-mountpoint=/mnt/test --filesystem-device=pmem1 --output=/dev/null --error=/dev/null -t1 $file_in1]
expect {
        "sbatch: error: unrecognized filesystem device \"pmem1\"" {
                incr matches
        }
        timeout {
                log_error "sbatch not responding"
                slow_kill $sbatch_pid1
                incr exit_code
        }
        eof {
                wait
        }
}
if {$matches != 1} {
        send_user "$matches FAILURE: missing arguments for filesystem device; (B10) sbatch didn't fail.\n"
        end_it 1
}
if {$matches == 1} {
        send_user "\nSUCCESS\n"
}









if {$exit_code == 0} {
        exec $bin_rm -f $file_in1
        print_success $test_id
}
exit $exit_code


